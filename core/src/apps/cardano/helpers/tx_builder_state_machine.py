from micropython import const

if False:
    ActionType = int


class TxBuilderStateMachine:
    # states
    STATE_INIT = const(0)
    STATE_INPUTS = const(1)
    STATE_INPUTS_FINISHED = const(2)
    STATE_OUTPUTS = const(3)
    STATE_OUTPUT_WITH_TOKENS = const(4)
    STATE_ASSET_GROUPS = const(5)
    STATE_TOKENS = const(6)
    STATE_ASSET_GROUPS_FINISHED = const(7)
    STATE_OUTPUTS_FINISHED = const(8)
    STATE_FEE_FINISHED = const(9)
    STATE_TTL_FINISHED = const(10)
    STATE_CERTIFICATES = const(11)
    STATE_POOL_REGISTRATION_CERTIFICATE = const(12)
    STATE_POOL_OWNERS = const(13)
    STATE_POOL_OWNERS_FINISHED = const(14)
    STATE_POOL_RELAYS = const(15)
    STATE_POOL_RELAYS_FINISHED = const(16)
    STATE_POOL_METADATA_FINISHED = const(17)
    STATE_CERTIFICATES_FINISHED = const(18)
    STATE_WITHDRAWALS = const(19)
    STATE_WITHDRAWALS_FINISHED = const(20)
    STATE_AUXILIARY_DATA_FINISHED = const(21)
    STATE_VALIDITIY_INTERVAL_START_FINISHED = const(22)
    STATE_END = const(23)

    # actions
    ACTION_INPUTS_START = const(100)
    ACTION_INPUT_ADD = const(101)
    ACTION_INPUTS_FINISH = const(102)
    ACTION_OUTPUTS_START = const(103)
    ACTION_OUTPUT_ADD_WITHOUT_TOKENS = const(104)
    ACTION_OUTPUT_ADD_WITH_TOKENS = const(105)
    ACTION_ASSET_GROUPS_START = const(106)
    ACTION_ASSET_GROUP_ADD = const(107)
    ACTION_TOKEN_ADD = const(108)
    ACTION_TOKENS_FINISH = const(109)
    ACTION_ASSET_GROUPS_FINISH = const(110)
    ACTION_OUTPUT_FINISH = const(111)
    ACTION_OUTPUTS_FINISH = const(112)
    ACTION_FEE_ADD = const(113)
    ACTION_TTL_ADD = const(114)
    ACTION_CERTIFICATES_START = const(115)
    ACTION_CERTIFICATE_ADD_SIMPLE = const(116)
    ACTION_CERTIFICATE_ADD_POOL_REGISTRATION = const(117)
    ACTION_POOL_OWNERS_START = const(118)
    ACTION_POOL_OWNER_ADD = const(119)
    ACTION_POOL_OWNERS_FINISH = const(120)
    ACTION_POOL_RELAYS_START = const(121)
    ACTION_POOL_RELAY_ADD = const(122)
    ACTION_POOL_RELAYS_FINISH = const(123)
    ACTION_POOL_METADATA_ADD = const(124)
    ACTION_CERTIFICATE_FINISH = const(125)
    ACTION_CERTIFICATES_FINISH = const(126)
    ACTION_WITHDRAWALS_START = const(127)
    ACTION_WITHDRAWAL_ADD = const(128)
    ACTION_WITHDRAWAL_FINISH = const(129)
    ACTION_AUXILIARY_DATA_HASH_ADD = const(130)
    ACTION_VALIDITY_INTERVAL_START_ADD = const(131)
    ACTION_FINISH = const(132)

    VALID_TRANSITIONS: dict[int, dict[int, int]] = {
        STATE_INIT: {ACTION_INPUTS_START: STATE_INPUTS},
        STATE_INPUTS: {
            ACTION_INPUT_ADD: STATE_INPUTS,
            ACTION_INPUTS_FINISH: STATE_INPUTS_FINISHED,
        },
        STATE_INPUTS_FINISHED: {
            ACTION_OUTPUTS_START: STATE_OUTPUTS,
            ACTION_FINISH: STATE_END,
        },
        STATE_OUTPUTS: {
            ACTION_OUTPUT_ADD_WITHOUT_TOKENS: STATE_OUTPUTS,
            ACTION_OUTPUT_ADD_WITH_TOKENS: STATE_OUTPUT_WITH_TOKENS,
            ACTION_OUTPUTS_FINISH: STATE_OUTPUTS_FINISHED,
        },
        STATE_OUTPUT_WITH_TOKENS: {
            ACTION_ASSET_GROUPS_START: STATE_ASSET_GROUPS,
        },
        STATE_ASSET_GROUPS: {
            ACTION_ASSET_GROUP_ADD: STATE_TOKENS,
            ACTION_ASSET_GROUPS_FINISH: STATE_ASSET_GROUPS_FINISHED,
        },
        STATE_TOKENS: {
            ACTION_TOKEN_ADD: STATE_TOKENS,
            ACTION_TOKENS_FINISH: STATE_ASSET_GROUPS,
        },
        STATE_ASSET_GROUPS_FINISHED: {ACTION_OUTPUT_FINISH: STATE_OUTPUTS},
        STATE_OUTPUTS_FINISHED: {
            ACTION_FEE_ADD: STATE_FEE_FINISHED,
            ACTION_FINISH: STATE_END,
        },
        STATE_FEE_FINISHED: {
            ACTION_TTL_ADD: STATE_TTL_FINISHED,
            ACTION_CERTIFICATES_START: STATE_CERTIFICATES,
            ACTION_WITHDRAWALS_START: STATE_WITHDRAWALS,
            ACTION_AUXILIARY_DATA_HASH_ADD: STATE_AUXILIARY_DATA_FINISHED,
            ACTION_VALIDITY_INTERVAL_START_ADD: STATE_VALIDITIY_INTERVAL_START_FINISHED,
            ACTION_FINISH: STATE_END,
        },
        STATE_TTL_FINISHED: {
            ACTION_CERTIFICATES_START: STATE_CERTIFICATES,
            ACTION_WITHDRAWALS_START: STATE_WITHDRAWALS,
            ACTION_AUXILIARY_DATA_HASH_ADD: STATE_AUXILIARY_DATA_FINISHED,
            ACTION_VALIDITY_INTERVAL_START_ADD: STATE_VALIDITIY_INTERVAL_START_FINISHED,
            ACTION_FINISH: STATE_END,
        },
        STATE_CERTIFICATES: {
            ACTION_CERTIFICATE_ADD_SIMPLE: STATE_CERTIFICATES,
            ACTION_CERTIFICATE_ADD_POOL_REGISTRATION: STATE_POOL_REGISTRATION_CERTIFICATE,
            ACTION_CERTIFICATES_FINISH: STATE_CERTIFICATES_FINISHED,
        },
        STATE_POOL_REGISTRATION_CERTIFICATE: {
            ACTION_POOL_OWNERS_START: STATE_POOL_OWNERS
        },
        STATE_POOL_OWNERS: {
            ACTION_POOL_OWNER_ADD: STATE_POOL_OWNERS,
            ACTION_POOL_OWNERS_FINISH: STATE_POOL_OWNERS_FINISHED,
        },
        STATE_POOL_OWNERS_FINISHED: {ACTION_POOL_RELAYS_START: STATE_POOL_RELAYS},
        STATE_POOL_RELAYS: {
            ACTION_POOL_RELAY_ADD: STATE_POOL_RELAYS,
            ACTION_POOL_RELAYS_FINISH: STATE_POOL_RELAYS_FINISHED,
        },
        STATE_POOL_RELAYS_FINISHED: {
            ACTION_POOL_METADATA_ADD: STATE_POOL_METADATA_FINISHED
        },
        STATE_POOL_METADATA_FINISHED: {ACTION_CERTIFICATE_FINISH: STATE_CERTIFICATES},
        STATE_CERTIFICATES_FINISHED: {
            ACTION_WITHDRAWALS_START: STATE_WITHDRAWALS,
            ACTION_AUXILIARY_DATA_HASH_ADD: STATE_AUXILIARY_DATA_FINISHED,
            ACTION_VALIDITY_INTERVAL_START_ADD: STATE_VALIDITIY_INTERVAL_START_FINISHED,
            ACTION_FINISH: STATE_END,
        },
        STATE_WITHDRAWALS: {
            ACTION_WITHDRAWAL_ADD: STATE_WITHDRAWALS,
            ACTION_WITHDRAWAL_FINISH: STATE_WITHDRAWALS_FINISHED,
        },
        STATE_WITHDRAWALS_FINISHED: {
            ACTION_AUXILIARY_DATA_HASH_ADD: STATE_AUXILIARY_DATA_FINISHED,
            ACTION_VALIDITY_INTERVAL_START_ADD: STATE_VALIDITIY_INTERVAL_START_FINISHED,
            ACTION_FINISH: STATE_END,
        },
        STATE_AUXILIARY_DATA_FINISHED: {
            ACTION_VALIDITY_INTERVAL_START_ADD: STATE_VALIDITIY_INTERVAL_START_FINISHED,
            ACTION_FINISH: STATE_END,
        },
        STATE_VALIDITIY_INTERVAL_START_FINISHED: {ACTION_FINISH: STATE_END},
        STATE_END: {},
    }

    def __init__(self) -> None:
        self.state: int = self.STATE_INIT

    def transition(self, action: ActionType) -> None:
        assert (
            action in self.VALID_TRANSITIONS[self.state]
        ), "Invalid TxBuilder state transition"
        self.state = self.VALID_TRANSITIONS[self.state][action]
